package messagepack

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *Log) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Time"
	o = append(o, 0x82, 0xa4, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendUint32(o, z.Time)
	// string "Contents"
	o = append(o, 0xa8, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Contents)))
	for za0001 := range z.Contents {
		if z.Contents[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Key"
			o = append(o, 0x82, 0xa3, 0x4b, 0x65, 0x79)
			o = msgp.AppendString(o, z.Contents[za0001].Key)
			// string "Value"
			o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
			o = msgp.AppendString(o, z.Contents[za0001].Value)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Log) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Time":
			z.Time, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "Contents":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Contents")
				return
			}
			if cap(z.Contents) >= int(zb0002) {
				z.Contents = (z.Contents)[:zb0002]
			} else {
				z.Contents = make([]*LogContent, zb0002)
			}
			for za0001 := range z.Contents {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Contents[za0001] = nil
				} else {
					if z.Contents[za0001] == nil {
						z.Contents[za0001] = new(LogContent)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Contents", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Contents", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Key":
							z.Contents[za0001].Key, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Contents", za0001, "Key")
								return
							}
						case "Value":
							z.Contents[za0001].Value, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Contents", za0001, "Value")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Contents", za0001)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Log) Msgsize() (s int) {
	s = 1 + 5 + msgp.Uint32Size + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.Contents {
		if z.Contents[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 4 + msgp.StringPrefixSize + len(z.Contents[za0001].Key) + 6 + msgp.StringPrefixSize + len(z.Contents[za0001].Value)
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z LogContent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Key"
	o = append(o, 0x82, 0xa3, 0x4b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Key)
	// string "Value"
	o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendString(o, z.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LogContent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Key":
			z.Key, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "Value":
			z.Value, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z LogContent) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Key) + 6 + msgp.StringPrefixSize + len(z.Value)
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LogGroup) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "log"
	o = append(o, 0x86, 0xa3, 0x6c, 0x6f, 0x67)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Logs)))
	for za0001 := range z.Logs {
		if z.Logs[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Logs[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Logs", za0001)
				return
			}
		}
	}
	// string "logtag"
	o = append(o, 0xa6, 0x6c, 0x6f, 0x67, 0x74, 0x61, 0x67)
	o = msgp.AppendArrayHeader(o, uint32(len(z.LogTag)))
	for za0002 := range z.LogTag {
		if z.LogTag[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Key"
			o = append(o, 0x82, 0xa3, 0x4b, 0x65, 0x79)
			o = msgp.AppendString(o, z.LogTag[za0002].Key)
			// string "Value"
			o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
			o = msgp.AppendString(o, z.LogTag[za0002].Value)
		}
	}
	// string "age"
	o = append(o, 0xa3, 0x61, 0x67, 0x65)
	o = msgp.AppendString(o, z.Category)
	// string "topic"
	o = append(o, 0xa5, 0x74, 0x6f, 0x70, 0x69, 0x63)
	o = msgp.AppendString(o, z.Topic)
	// string "source"
	o = append(o, 0xa6, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65)
	o = msgp.AppendString(o, z.Source)
	// string "machineUUID"
	o = append(o, 0xab, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x55, 0x55, 0x49, 0x44)
	o = msgp.AppendString(o, z.MachineUUID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LogGroup) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "log":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Logs")
				return
			}
			if cap(z.Logs) >= int(zb0002) {
				z.Logs = (z.Logs)[:zb0002]
			} else {
				z.Logs = make([]*Log, zb0002)
			}
			for za0001 := range z.Logs {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Logs[za0001] = nil
				} else {
					if z.Logs[za0001] == nil {
						z.Logs[za0001] = new(Log)
					}
					bts, err = z.Logs[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Logs", za0001)
						return
					}
				}
			}
		case "logtag":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LogTag")
				return
			}
			if cap(z.LogTag) >= int(zb0003) {
				z.LogTag = (z.LogTag)[:zb0003]
			} else {
				z.LogTag = make([]*LogTag, zb0003)
			}
			for za0002 := range z.LogTag {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.LogTag[za0002] = nil
				} else {
					if z.LogTag[za0002] == nil {
						z.LogTag[za0002] = new(LogTag)
					}
					var zb0004 uint32
					zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "LogTag", za0002)
						return
					}
					for zb0004 > 0 {
						zb0004--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "LogTag", za0002)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Key":
							z.LogTag[za0002].Key, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "LogTag", za0002, "Key")
								return
							}
						case "Value":
							z.LogTag[za0002].Value, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "LogTag", za0002, "Value")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "LogTag", za0002)
								return
							}
						}
					}
				}
			}
		case "age":
			z.Category, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Category")
				return
			}
		case "topic":
			z.Topic, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Topic")
				return
			}
		case "source":
			z.Source, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Source")
				return
			}
		case "machineUUID":
			z.MachineUUID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MachineUUID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LogGroup) Msgsize() (s int) {
	s = 1 + 4 + msgp.ArrayHeaderSize
	for za0001 := range z.Logs {
		if z.Logs[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Logs[za0001].Msgsize()
		}
	}
	s += 7 + msgp.ArrayHeaderSize
	for za0002 := range z.LogTag {
		if z.LogTag[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 4 + msgp.StringPrefixSize + len(z.LogTag[za0002].Key) + 6 + msgp.StringPrefixSize + len(z.LogTag[za0002].Value)
		}
	}
	s += 4 + msgp.StringPrefixSize + len(z.Category) + 6 + msgp.StringPrefixSize + len(z.Topic) + 7 + msgp.StringPrefixSize + len(z.Source) + 12 + msgp.StringPrefixSize + len(z.MachineUUID)
	return
}

// MarshalMsg implements msgp.Marshaler
func (z LogTag) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Key"
	o = append(o, 0x82, 0xa3, 0x4b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Key)
	// string "Value"
	o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendString(o, z.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LogTag) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Key":
			z.Key, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "Value":
			z.Value, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z LogTag) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Key) + 6 + msgp.StringPrefixSize + len(z.Value)
	return
}
