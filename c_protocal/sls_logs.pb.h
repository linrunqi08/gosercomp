// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sls_logs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sls_5flogs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sls_5flogs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sls_5flogs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sls_5flogs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sls_5flogs_2eproto;
namespace sls_logs {
class Log;
struct LogDefaultTypeInternal;
extern LogDefaultTypeInternal _Log_default_instance_;
class LogGroup;
struct LogGroupDefaultTypeInternal;
extern LogGroupDefaultTypeInternal _LogGroup_default_instance_;
class LogGroupList;
struct LogGroupListDefaultTypeInternal;
extern LogGroupListDefaultTypeInternal _LogGroupList_default_instance_;
class LogTag;
struct LogTagDefaultTypeInternal;
extern LogTagDefaultTypeInternal _LogTag_default_instance_;
class Log_Content;
struct Log_ContentDefaultTypeInternal;
extern Log_ContentDefaultTypeInternal _Log_Content_default_instance_;
class SlsLogPackage;
struct SlsLogPackageDefaultTypeInternal;
extern SlsLogPackageDefaultTypeInternal _SlsLogPackage_default_instance_;
class SlsLogPackageList;
struct SlsLogPackageListDefaultTypeInternal;
extern SlsLogPackageListDefaultTypeInternal _SlsLogPackageList_default_instance_;
}  // namespace sls_logs
PROTOBUF_NAMESPACE_OPEN
template<> ::sls_logs::Log* Arena::CreateMaybeMessage<::sls_logs::Log>(Arena*);
template<> ::sls_logs::LogGroup* Arena::CreateMaybeMessage<::sls_logs::LogGroup>(Arena*);
template<> ::sls_logs::LogGroupList* Arena::CreateMaybeMessage<::sls_logs::LogGroupList>(Arena*);
template<> ::sls_logs::LogTag* Arena::CreateMaybeMessage<::sls_logs::LogTag>(Arena*);
template<> ::sls_logs::Log_Content* Arena::CreateMaybeMessage<::sls_logs::Log_Content>(Arena*);
template<> ::sls_logs::SlsLogPackage* Arena::CreateMaybeMessage<::sls_logs::SlsLogPackage>(Arena*);
template<> ::sls_logs::SlsLogPackageList* Arena::CreateMaybeMessage<::sls_logs::SlsLogPackageList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sls_logs {

enum SlsCompressType : int {
  SLS_CMP_NONE = 0,
  SLS_CMP_DEFLATE = 1,
  SLS_CMP_LZ4 = 2,
  SLS_CMP_ZSTD = 3
};
bool SlsCompressType_IsValid(int value);
constexpr SlsCompressType SlsCompressType_MIN = SLS_CMP_NONE;
constexpr SlsCompressType SlsCompressType_MAX = SLS_CMP_ZSTD;
constexpr int SlsCompressType_ARRAYSIZE = SlsCompressType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SlsCompressType_descriptor();
template<typename T>
inline const std::string& SlsCompressType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SlsCompressType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SlsCompressType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SlsCompressType_descriptor(), enum_t_value);
}
inline bool SlsCompressType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SlsCompressType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SlsCompressType>(
    SlsCompressType_descriptor(), name, value);
}
// ===================================================================

class Log_Content final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sls_logs.Log.Content) */ {
 public:
  inline Log_Content() : Log_Content(nullptr) {}
  ~Log_Content() override;
  explicit constexpr Log_Content(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Log_Content(const Log_Content& from);
  Log_Content(Log_Content&& from) noexcept
    : Log_Content() {
    *this = ::std::move(from);
  }

  inline Log_Content& operator=(const Log_Content& from) {
    CopyFrom(from);
    return *this;
  }
  inline Log_Content& operator=(Log_Content&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Log_Content& default_instance() {
    return *internal_default_instance();
  }
  static inline const Log_Content* internal_default_instance() {
    return reinterpret_cast<const Log_Content*>(
               &_Log_Content_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Log_Content& a, Log_Content& b) {
    a.Swap(&b);
  }
  inline void Swap(Log_Content* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Log_Content* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Log_Content* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Log_Content>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Log_Content& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Log_Content& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Log_Content* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sls_logs.Log.Content";
  }
  protected:
  explicit Log_Content(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string Key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string Value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:sls_logs.Log.Content)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_sls_5flogs_2eproto;
};
// -------------------------------------------------------------------

class Log final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sls_logs.Log) */ {
 public:
  inline Log() : Log(nullptr) {}
  ~Log() override;
  explicit constexpr Log(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Log(const Log& from);
  Log(Log&& from) noexcept
    : Log() {
    *this = ::std::move(from);
  }

  inline Log& operator=(const Log& from) {
    CopyFrom(from);
    return *this;
  }
  inline Log& operator=(Log&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Log& default_instance() {
    return *internal_default_instance();
  }
  static inline const Log* internal_default_instance() {
    return reinterpret_cast<const Log*>(
               &_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Log& a, Log& b) {
    a.Swap(&b);
  }
  inline void Swap(Log* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Log* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Log* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Log>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Log& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Log& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Log* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sls_logs.Log";
  }
  protected:
  explicit Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Log_Content Content;

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // repeated .sls_logs.Log.Content Contents = 2;
  int contents_size() const;
  private:
  int _internal_contents_size() const;
  public:
  void clear_contents();
  ::sls_logs::Log_Content* mutable_contents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::Log_Content >*
      mutable_contents();
  private:
  const ::sls_logs::Log_Content& _internal_contents(int index) const;
  ::sls_logs::Log_Content* _internal_add_contents();
  public:
  const ::sls_logs::Log_Content& contents(int index) const;
  ::sls_logs::Log_Content* add_contents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::Log_Content >&
      contents() const;

  // required uint32 Time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sls_logs.Log)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::Log_Content > contents_;
  uint32_t time_;
  friend struct ::TableStruct_sls_5flogs_2eproto;
};
// -------------------------------------------------------------------

class LogTag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sls_logs.LogTag) */ {
 public:
  inline LogTag() : LogTag(nullptr) {}
  ~LogTag() override;
  explicit constexpr LogTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogTag(const LogTag& from);
  LogTag(LogTag&& from) noexcept
    : LogTag() {
    *this = ::std::move(from);
  }

  inline LogTag& operator=(const LogTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogTag& operator=(LogTag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogTag* internal_default_instance() {
    return reinterpret_cast<const LogTag*>(
               &_LogTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogTag& a, LogTag& b) {
    a.Swap(&b);
  }
  inline void Swap(LogTag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogTag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogTag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogTag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogTag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sls_logs.LogTag";
  }
  protected:
  explicit LogTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string Key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string Value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:sls_logs.LogTag)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_sls_5flogs_2eproto;
};
// -------------------------------------------------------------------

class LogGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sls_logs.LogGroup) */ {
 public:
  inline LogGroup() : LogGroup(nullptr) {}
  ~LogGroup() override;
  explicit constexpr LogGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogGroup(const LogGroup& from);
  LogGroup(LogGroup&& from) noexcept
    : LogGroup() {
    *this = ::std::move(from);
  }

  inline LogGroup& operator=(const LogGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogGroup& operator=(LogGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogGroup* internal_default_instance() {
    return reinterpret_cast<const LogGroup*>(
               &_LogGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogGroup& a, LogGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(LogGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sls_logs.LogGroup";
  }
  protected:
  explicit LogGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 1,
    kLogTagsFieldNumber = 6,
    kCategoryFieldNumber = 2,
    kTopicFieldNumber = 3,
    kSourceFieldNumber = 4,
    kMachineUUIDFieldNumber = 5,
  };
  // repeated .sls_logs.Log Logs = 1;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::sls_logs::Log* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::Log >*
      mutable_logs();
  private:
  const ::sls_logs::Log& _internal_logs(int index) const;
  ::sls_logs::Log* _internal_add_logs();
  public:
  const ::sls_logs::Log& logs(int index) const;
  ::sls_logs::Log* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::Log >&
      logs() const;

  // repeated .sls_logs.LogTag LogTags = 6;
  int logtags_size() const;
  private:
  int _internal_logtags_size() const;
  public:
  void clear_logtags();
  ::sls_logs::LogTag* mutable_logtags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::LogTag >*
      mutable_logtags();
  private:
  const ::sls_logs::LogTag& _internal_logtags(int index) const;
  ::sls_logs::LogTag* _internal_add_logtags();
  public:
  const ::sls_logs::LogTag& logtags(int index) const;
  ::sls_logs::LogTag* add_logtags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::LogTag >&
      logtags() const;

  // optional string Category = 2;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const std::string& category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // optional string Topic = 3;
  bool has_topic() const;
  private:
  bool _internal_has_topic() const;
  public:
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // optional string Source = 4;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string MachineUUID = 5;
  bool has_machineuuid() const;
  private:
  bool _internal_has_machineuuid() const;
  public:
  void clear_machineuuid();
  const std::string& machineuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machineuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machineuuid();
  PROTOBUF_NODISCARD std::string* release_machineuuid();
  void set_allocated_machineuuid(std::string* machineuuid);
  private:
  const std::string& _internal_machineuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machineuuid(const std::string& value);
  std::string* _internal_mutable_machineuuid();
  public:

  // @@protoc_insertion_point(class_scope:sls_logs.LogGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::Log > logs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::LogTag > logtags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machineuuid_;
  friend struct ::TableStruct_sls_5flogs_2eproto;
};
// -------------------------------------------------------------------

class SlsLogPackage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sls_logs.SlsLogPackage) */ {
 public:
  inline SlsLogPackage() : SlsLogPackage(nullptr) {}
  ~SlsLogPackage() override;
  explicit constexpr SlsLogPackage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlsLogPackage(const SlsLogPackage& from);
  SlsLogPackage(SlsLogPackage&& from) noexcept
    : SlsLogPackage() {
    *this = ::std::move(from);
  }

  inline SlsLogPackage& operator=(const SlsLogPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlsLogPackage& operator=(SlsLogPackage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlsLogPackage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlsLogPackage* internal_default_instance() {
    return reinterpret_cast<const SlsLogPackage*>(
               &_SlsLogPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SlsLogPackage& a, SlsLogPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(SlsLogPackage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlsLogPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlsLogPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlsLogPackage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlsLogPackage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlsLogPackage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlsLogPackage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sls_logs.SlsLogPackage";
  }
  protected:
  explicit SlsLogPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kUncompressSizeFieldNumber = 2,
    kCompressTypeFieldNumber = 3,
  };
  // required bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional int32 uncompress_size = 2;
  bool has_uncompress_size() const;
  private:
  bool _internal_has_uncompress_size() const;
  public:
  void clear_uncompress_size();
  int32_t uncompress_size() const;
  void set_uncompress_size(int32_t value);
  private:
  int32_t _internal_uncompress_size() const;
  void _internal_set_uncompress_size(int32_t value);
  public:

  // optional .sls_logs.SlsCompressType compress_type = 3;
  bool has_compress_type() const;
  private:
  bool _internal_has_compress_type() const;
  public:
  void clear_compress_type();
  ::sls_logs::SlsCompressType compress_type() const;
  void set_compress_type(::sls_logs::SlsCompressType value);
  private:
  ::sls_logs::SlsCompressType _internal_compress_type() const;
  void _internal_set_compress_type(::sls_logs::SlsCompressType value);
  public:

  // @@protoc_insertion_point(class_scope:sls_logs.SlsLogPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int32_t uncompress_size_;
  int compress_type_;
  friend struct ::TableStruct_sls_5flogs_2eproto;
};
// -------------------------------------------------------------------

class SlsLogPackageList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sls_logs.SlsLogPackageList) */ {
 public:
  inline SlsLogPackageList() : SlsLogPackageList(nullptr) {}
  ~SlsLogPackageList() override;
  explicit constexpr SlsLogPackageList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlsLogPackageList(const SlsLogPackageList& from);
  SlsLogPackageList(SlsLogPackageList&& from) noexcept
    : SlsLogPackageList() {
    *this = ::std::move(from);
  }

  inline SlsLogPackageList& operator=(const SlsLogPackageList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlsLogPackageList& operator=(SlsLogPackageList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlsLogPackageList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlsLogPackageList* internal_default_instance() {
    return reinterpret_cast<const SlsLogPackageList*>(
               &_SlsLogPackageList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SlsLogPackageList& a, SlsLogPackageList& b) {
    a.Swap(&b);
  }
  inline void Swap(SlsLogPackageList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlsLogPackageList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlsLogPackageList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlsLogPackageList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlsLogPackageList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlsLogPackageList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlsLogPackageList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sls_logs.SlsLogPackageList";
  }
  protected:
  explicit SlsLogPackageList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 1,
  };
  // repeated .sls_logs.SlsLogPackage packages = 1;
  int packages_size() const;
  private:
  int _internal_packages_size() const;
  public:
  void clear_packages();
  ::sls_logs::SlsLogPackage* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::SlsLogPackage >*
      mutable_packages();
  private:
  const ::sls_logs::SlsLogPackage& _internal_packages(int index) const;
  ::sls_logs::SlsLogPackage* _internal_add_packages();
  public:
  const ::sls_logs::SlsLogPackage& packages(int index) const;
  ::sls_logs::SlsLogPackage* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::SlsLogPackage >&
      packages() const;

  // @@protoc_insertion_point(class_scope:sls_logs.SlsLogPackageList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::SlsLogPackage > packages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sls_5flogs_2eproto;
};
// -------------------------------------------------------------------

class LogGroupList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sls_logs.LogGroupList) */ {
 public:
  inline LogGroupList() : LogGroupList(nullptr) {}
  ~LogGroupList() override;
  explicit constexpr LogGroupList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogGroupList(const LogGroupList& from);
  LogGroupList(LogGroupList&& from) noexcept
    : LogGroupList() {
    *this = ::std::move(from);
  }

  inline LogGroupList& operator=(const LogGroupList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogGroupList& operator=(LogGroupList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogGroupList& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogGroupList* internal_default_instance() {
    return reinterpret_cast<const LogGroupList*>(
               &_LogGroupList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LogGroupList& a, LogGroupList& b) {
    a.Swap(&b);
  }
  inline void Swap(LogGroupList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogGroupList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogGroupList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogGroupList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogGroupList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogGroupList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogGroupList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sls_logs.LogGroupList";
  }
  protected:
  explicit LogGroupList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogGroupListFieldNumber = 1,
  };
  // repeated .sls_logs.LogGroup logGroupList = 1;
  int loggrouplist_size() const;
  private:
  int _internal_loggrouplist_size() const;
  public:
  void clear_loggrouplist();
  ::sls_logs::LogGroup* mutable_loggrouplist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::LogGroup >*
      mutable_loggrouplist();
  private:
  const ::sls_logs::LogGroup& _internal_loggrouplist(int index) const;
  ::sls_logs::LogGroup* _internal_add_loggrouplist();
  public:
  const ::sls_logs::LogGroup& loggrouplist(int index) const;
  ::sls_logs::LogGroup* add_loggrouplist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::LogGroup >&
      loggrouplist() const;

  // @@protoc_insertion_point(class_scope:sls_logs.LogGroupList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::LogGroup > loggrouplist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sls_5flogs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Log_Content

// required string Key = 1;
inline bool Log_Content::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Log_Content::has_key() const {
  return _internal_has_key();
}
inline void Log_Content::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Log_Content::key() const {
  // @@protoc_insertion_point(field_get:sls_logs.Log.Content.Key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Log_Content::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sls_logs.Log.Content.Key)
}
inline std::string* Log_Content::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:sls_logs.Log.Content.Key)
  return _s;
}
inline const std::string& Log_Content::_internal_key() const {
  return key_.Get();
}
inline void Log_Content::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Log_Content::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Log_Content::release_key() {
  // @@protoc_insertion_point(field_release:sls_logs.Log.Content.Key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Log_Content::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sls_logs.Log.Content.Key)
}

// required string Value = 2;
inline bool Log_Content::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Log_Content::has_value() const {
  return _internal_has_value();
}
inline void Log_Content::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Log_Content::value() const {
  // @@protoc_insertion_point(field_get:sls_logs.Log.Content.Value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Log_Content::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sls_logs.Log.Content.Value)
}
inline std::string* Log_Content::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:sls_logs.Log.Content.Value)
  return _s;
}
inline const std::string& Log_Content::_internal_value() const {
  return value_.Get();
}
inline void Log_Content::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Log_Content::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Log_Content::release_value() {
  // @@protoc_insertion_point(field_release:sls_logs.Log.Content.Value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Log_Content::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sls_logs.Log.Content.Value)
}

// -------------------------------------------------------------------

// Log

// required uint32 Time = 1;
inline bool Log::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Log::has_time() const {
  return _internal_has_time();
}
inline void Log::clear_time() {
  time_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Log::_internal_time() const {
  return time_;
}
inline uint32_t Log::time() const {
  // @@protoc_insertion_point(field_get:sls_logs.Log.Time)
  return _internal_time();
}
inline void Log::_internal_set_time(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void Log::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:sls_logs.Log.Time)
}

// repeated .sls_logs.Log.Content Contents = 2;
inline int Log::_internal_contents_size() const {
  return contents_.size();
}
inline int Log::contents_size() const {
  return _internal_contents_size();
}
inline void Log::clear_contents() {
  contents_.Clear();
}
inline ::sls_logs::Log_Content* Log::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:sls_logs.Log.Contents)
  return contents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::Log_Content >*
Log::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:sls_logs.Log.Contents)
  return &contents_;
}
inline const ::sls_logs::Log_Content& Log::_internal_contents(int index) const {
  return contents_.Get(index);
}
inline const ::sls_logs::Log_Content& Log::contents(int index) const {
  // @@protoc_insertion_point(field_get:sls_logs.Log.Contents)
  return _internal_contents(index);
}
inline ::sls_logs::Log_Content* Log::_internal_add_contents() {
  return contents_.Add();
}
inline ::sls_logs::Log_Content* Log::add_contents() {
  ::sls_logs::Log_Content* _add = _internal_add_contents();
  // @@protoc_insertion_point(field_add:sls_logs.Log.Contents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::Log_Content >&
Log::contents() const {
  // @@protoc_insertion_point(field_list:sls_logs.Log.Contents)
  return contents_;
}

// -------------------------------------------------------------------

// LogTag

// required string Key = 1;
inline bool LogTag::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogTag::has_key() const {
  return _internal_has_key();
}
inline void LogTag::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogTag::key() const {
  // @@protoc_insertion_point(field_get:sls_logs.LogTag.Key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogTag::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sls_logs.LogTag.Key)
}
inline std::string* LogTag::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:sls_logs.LogTag.Key)
  return _s;
}
inline const std::string& LogTag::_internal_key() const {
  return key_.Get();
}
inline void LogTag::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogTag::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogTag::release_key() {
  // @@protoc_insertion_point(field_release:sls_logs.LogTag.Key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogTag::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sls_logs.LogTag.Key)
}

// required string Value = 2;
inline bool LogTag::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogTag::has_value() const {
  return _internal_has_value();
}
inline void LogTag::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LogTag::value() const {
  // @@protoc_insertion_point(field_get:sls_logs.LogTag.Value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogTag::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sls_logs.LogTag.Value)
}
inline std::string* LogTag::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:sls_logs.LogTag.Value)
  return _s;
}
inline const std::string& LogTag::_internal_value() const {
  return value_.Get();
}
inline void LogTag::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogTag::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogTag::release_value() {
  // @@protoc_insertion_point(field_release:sls_logs.LogTag.Value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogTag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sls_logs.LogTag.Value)
}

// -------------------------------------------------------------------

// LogGroup

// repeated .sls_logs.Log Logs = 1;
inline int LogGroup::_internal_logs_size() const {
  return logs_.size();
}
inline int LogGroup::logs_size() const {
  return _internal_logs_size();
}
inline void LogGroup::clear_logs() {
  logs_.Clear();
}
inline ::sls_logs::Log* LogGroup::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:sls_logs.LogGroup.Logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::Log >*
LogGroup::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:sls_logs.LogGroup.Logs)
  return &logs_;
}
inline const ::sls_logs::Log& LogGroup::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::sls_logs::Log& LogGroup::logs(int index) const {
  // @@protoc_insertion_point(field_get:sls_logs.LogGroup.Logs)
  return _internal_logs(index);
}
inline ::sls_logs::Log* LogGroup::_internal_add_logs() {
  return logs_.Add();
}
inline ::sls_logs::Log* LogGroup::add_logs() {
  ::sls_logs::Log* _add = _internal_add_logs();
  // @@protoc_insertion_point(field_add:sls_logs.LogGroup.Logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::Log >&
LogGroup::logs() const {
  // @@protoc_insertion_point(field_list:sls_logs.LogGroup.Logs)
  return logs_;
}

// optional string Category = 2;
inline bool LogGroup::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogGroup::has_category() const {
  return _internal_has_category();
}
inline void LogGroup::clear_category() {
  category_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogGroup::category() const {
  // @@protoc_insertion_point(field_get:sls_logs.LogGroup.Category)
  return _internal_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogGroup::set_category(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sls_logs.LogGroup.Category)
}
inline std::string* LogGroup::mutable_category() {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:sls_logs.LogGroup.Category)
  return _s;
}
inline const std::string& LogGroup::_internal_category() const {
  return category_.Get();
}
inline void LogGroup::_internal_set_category(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogGroup::_internal_mutable_category() {
  _has_bits_[0] |= 0x00000001u;
  return category_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogGroup::release_category() {
  // @@protoc_insertion_point(field_release:sls_logs.LogGroup.Category)
  if (!_internal_has_category()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = category_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (category_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogGroup::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (category_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sls_logs.LogGroup.Category)
}

// optional string Topic = 3;
inline bool LogGroup::_internal_has_topic() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogGroup::has_topic() const {
  return _internal_has_topic();
}
inline void LogGroup::clear_topic() {
  topic_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LogGroup::topic() const {
  // @@protoc_insertion_point(field_get:sls_logs.LogGroup.Topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogGroup::set_topic(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sls_logs.LogGroup.Topic)
}
inline std::string* LogGroup::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:sls_logs.LogGroup.Topic)
  return _s;
}
inline const std::string& LogGroup::_internal_topic() const {
  return topic_.Get();
}
inline void LogGroup::_internal_set_topic(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogGroup::_internal_mutable_topic() {
  _has_bits_[0] |= 0x00000002u;
  return topic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogGroup::release_topic() {
  // @@protoc_insertion_point(field_release:sls_logs.LogGroup.Topic)
  if (!_internal_has_topic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = topic_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (topic_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogGroup::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (topic_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sls_logs.LogGroup.Topic)
}

// optional string Source = 4;
inline bool LogGroup::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogGroup::has_source() const {
  return _internal_has_source();
}
inline void LogGroup::clear_source() {
  source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LogGroup::source() const {
  // @@protoc_insertion_point(field_get:sls_logs.LogGroup.Source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogGroup::set_source(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sls_logs.LogGroup.Source)
}
inline std::string* LogGroup::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:sls_logs.LogGroup.Source)
  return _s;
}
inline const std::string& LogGroup::_internal_source() const {
  return source_.Get();
}
inline void LogGroup::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogGroup::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000004u;
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogGroup::release_source() {
  // @@protoc_insertion_point(field_release:sls_logs.LogGroup.Source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogGroup::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sls_logs.LogGroup.Source)
}

// optional string MachineUUID = 5;
inline bool LogGroup::_internal_has_machineuuid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LogGroup::has_machineuuid() const {
  return _internal_has_machineuuid();
}
inline void LogGroup::clear_machineuuid() {
  machineuuid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LogGroup::machineuuid() const {
  // @@protoc_insertion_point(field_get:sls_logs.LogGroup.MachineUUID)
  return _internal_machineuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogGroup::set_machineuuid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 machineuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sls_logs.LogGroup.MachineUUID)
}
inline std::string* LogGroup::mutable_machineuuid() {
  std::string* _s = _internal_mutable_machineuuid();
  // @@protoc_insertion_point(field_mutable:sls_logs.LogGroup.MachineUUID)
  return _s;
}
inline const std::string& LogGroup::_internal_machineuuid() const {
  return machineuuid_.Get();
}
inline void LogGroup::_internal_set_machineuuid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  machineuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogGroup::_internal_mutable_machineuuid() {
  _has_bits_[0] |= 0x00000008u;
  return machineuuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogGroup::release_machineuuid() {
  // @@protoc_insertion_point(field_release:sls_logs.LogGroup.MachineUUID)
  if (!_internal_has_machineuuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = machineuuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machineuuid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machineuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogGroup::set_allocated_machineuuid(std::string* machineuuid) {
  if (machineuuid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  machineuuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machineuuid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machineuuid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machineuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sls_logs.LogGroup.MachineUUID)
}

// repeated .sls_logs.LogTag LogTags = 6;
inline int LogGroup::_internal_logtags_size() const {
  return logtags_.size();
}
inline int LogGroup::logtags_size() const {
  return _internal_logtags_size();
}
inline void LogGroup::clear_logtags() {
  logtags_.Clear();
}
inline ::sls_logs::LogTag* LogGroup::mutable_logtags(int index) {
  // @@protoc_insertion_point(field_mutable:sls_logs.LogGroup.LogTags)
  return logtags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::LogTag >*
LogGroup::mutable_logtags() {
  // @@protoc_insertion_point(field_mutable_list:sls_logs.LogGroup.LogTags)
  return &logtags_;
}
inline const ::sls_logs::LogTag& LogGroup::_internal_logtags(int index) const {
  return logtags_.Get(index);
}
inline const ::sls_logs::LogTag& LogGroup::logtags(int index) const {
  // @@protoc_insertion_point(field_get:sls_logs.LogGroup.LogTags)
  return _internal_logtags(index);
}
inline ::sls_logs::LogTag* LogGroup::_internal_add_logtags() {
  return logtags_.Add();
}
inline ::sls_logs::LogTag* LogGroup::add_logtags() {
  ::sls_logs::LogTag* _add = _internal_add_logtags();
  // @@protoc_insertion_point(field_add:sls_logs.LogGroup.LogTags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::LogTag >&
LogGroup::logtags() const {
  // @@protoc_insertion_point(field_list:sls_logs.LogGroup.LogTags)
  return logtags_;
}

// -------------------------------------------------------------------

// SlsLogPackage

// required bytes data = 1;
inline bool SlsLogPackage::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SlsLogPackage::has_data() const {
  return _internal_has_data();
}
inline void SlsLogPackage::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SlsLogPackage::data() const {
  // @@protoc_insertion_point(field_get:sls_logs.SlsLogPackage.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlsLogPackage::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sls_logs.SlsLogPackage.data)
}
inline std::string* SlsLogPackage::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:sls_logs.SlsLogPackage.data)
  return _s;
}
inline const std::string& SlsLogPackage::_internal_data() const {
  return data_.Get();
}
inline void SlsLogPackage::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SlsLogPackage::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SlsLogPackage::release_data() {
  // @@protoc_insertion_point(field_release:sls_logs.SlsLogPackage.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SlsLogPackage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sls_logs.SlsLogPackage.data)
}

// optional int32 uncompress_size = 2;
inline bool SlsLogPackage::_internal_has_uncompress_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SlsLogPackage::has_uncompress_size() const {
  return _internal_has_uncompress_size();
}
inline void SlsLogPackage::clear_uncompress_size() {
  uncompress_size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SlsLogPackage::_internal_uncompress_size() const {
  return uncompress_size_;
}
inline int32_t SlsLogPackage::uncompress_size() const {
  // @@protoc_insertion_point(field_get:sls_logs.SlsLogPackage.uncompress_size)
  return _internal_uncompress_size();
}
inline void SlsLogPackage::_internal_set_uncompress_size(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  uncompress_size_ = value;
}
inline void SlsLogPackage::set_uncompress_size(int32_t value) {
  _internal_set_uncompress_size(value);
  // @@protoc_insertion_point(field_set:sls_logs.SlsLogPackage.uncompress_size)
}

// optional .sls_logs.SlsCompressType compress_type = 3;
inline bool SlsLogPackage::_internal_has_compress_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SlsLogPackage::has_compress_type() const {
  return _internal_has_compress_type();
}
inline void SlsLogPackage::clear_compress_type() {
  compress_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sls_logs::SlsCompressType SlsLogPackage::_internal_compress_type() const {
  return static_cast< ::sls_logs::SlsCompressType >(compress_type_);
}
inline ::sls_logs::SlsCompressType SlsLogPackage::compress_type() const {
  // @@protoc_insertion_point(field_get:sls_logs.SlsLogPackage.compress_type)
  return _internal_compress_type();
}
inline void SlsLogPackage::_internal_set_compress_type(::sls_logs::SlsCompressType value) {
  assert(::sls_logs::SlsCompressType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  compress_type_ = value;
}
inline void SlsLogPackage::set_compress_type(::sls_logs::SlsCompressType value) {
  _internal_set_compress_type(value);
  // @@protoc_insertion_point(field_set:sls_logs.SlsLogPackage.compress_type)
}

// -------------------------------------------------------------------

// SlsLogPackageList

// repeated .sls_logs.SlsLogPackage packages = 1;
inline int SlsLogPackageList::_internal_packages_size() const {
  return packages_.size();
}
inline int SlsLogPackageList::packages_size() const {
  return _internal_packages_size();
}
inline void SlsLogPackageList::clear_packages() {
  packages_.Clear();
}
inline ::sls_logs::SlsLogPackage* SlsLogPackageList::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:sls_logs.SlsLogPackageList.packages)
  return packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::SlsLogPackage >*
SlsLogPackageList::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:sls_logs.SlsLogPackageList.packages)
  return &packages_;
}
inline const ::sls_logs::SlsLogPackage& SlsLogPackageList::_internal_packages(int index) const {
  return packages_.Get(index);
}
inline const ::sls_logs::SlsLogPackage& SlsLogPackageList::packages(int index) const {
  // @@protoc_insertion_point(field_get:sls_logs.SlsLogPackageList.packages)
  return _internal_packages(index);
}
inline ::sls_logs::SlsLogPackage* SlsLogPackageList::_internal_add_packages() {
  return packages_.Add();
}
inline ::sls_logs::SlsLogPackage* SlsLogPackageList::add_packages() {
  ::sls_logs::SlsLogPackage* _add = _internal_add_packages();
  // @@protoc_insertion_point(field_add:sls_logs.SlsLogPackageList.packages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::SlsLogPackage >&
SlsLogPackageList::packages() const {
  // @@protoc_insertion_point(field_list:sls_logs.SlsLogPackageList.packages)
  return packages_;
}

// -------------------------------------------------------------------

// LogGroupList

// repeated .sls_logs.LogGroup logGroupList = 1;
inline int LogGroupList::_internal_loggrouplist_size() const {
  return loggrouplist_.size();
}
inline int LogGroupList::loggrouplist_size() const {
  return _internal_loggrouplist_size();
}
inline void LogGroupList::clear_loggrouplist() {
  loggrouplist_.Clear();
}
inline ::sls_logs::LogGroup* LogGroupList::mutable_loggrouplist(int index) {
  // @@protoc_insertion_point(field_mutable:sls_logs.LogGroupList.logGroupList)
  return loggrouplist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::LogGroup >*
LogGroupList::mutable_loggrouplist() {
  // @@protoc_insertion_point(field_mutable_list:sls_logs.LogGroupList.logGroupList)
  return &loggrouplist_;
}
inline const ::sls_logs::LogGroup& LogGroupList::_internal_loggrouplist(int index) const {
  return loggrouplist_.Get(index);
}
inline const ::sls_logs::LogGroup& LogGroupList::loggrouplist(int index) const {
  // @@protoc_insertion_point(field_get:sls_logs.LogGroupList.logGroupList)
  return _internal_loggrouplist(index);
}
inline ::sls_logs::LogGroup* LogGroupList::_internal_add_loggrouplist() {
  return loggrouplist_.Add();
}
inline ::sls_logs::LogGroup* LogGroupList::add_loggrouplist() {
  ::sls_logs::LogGroup* _add = _internal_add_loggrouplist();
  // @@protoc_insertion_point(field_add:sls_logs.LogGroupList.logGroupList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sls_logs::LogGroup >&
LogGroupList::loggrouplist() const {
  // @@protoc_insertion_point(field_list:sls_logs.LogGroupList.logGroupList)
  return loggrouplist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sls_logs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sls_logs::SlsCompressType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sls_logs::SlsCompressType>() {
  return ::sls_logs::SlsCompressType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sls_5flogs_2eproto
