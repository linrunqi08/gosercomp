// Code generated by msgpackgen. DO NOT EDIT.

package model

import (
	"fmt"
	msgpack "github.com/shamaton/msgpackgen/msgpack"
	dec "github.com/shamaton/msgpackgen/msgpack/dec"
	enc "github.com/shamaton/msgpackgen/msgpack/enc"
)

// RegisterGeneratedResolver registers generated resolver.
func RegisterGeneratedResolver() {
	msgpack.SetResolver(___encodeAsMap, ___encodeAsArray, ___decodeAsMap, ___decodeAsArray)
}

// encode
func ___encode(i interface{}) ([]byte, error) {
	if msgpack.StructAsArray() {
		return ___encodeAsArray(i)
	} else {
		return ___encodeAsMap(i)
	}
}

// encodeAsArray
func ___encodeAsArray(i interface{}) ([]byte, error) {
	switch v := i.(type) {
	case ColorGroup:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "ColorGroup", size, offset)
		}
		return b, err
	case *ColorGroup:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "ColorGroup", size, offset)
		}
		return b, err
	}
	return nil, nil
}

// encodeAsMap
func ___encodeAsMap(i interface{}) ([]byte, error) {
	switch v := i.(type) {
	case ColorGroup:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "ColorGroup", size, offset)
		}
		return b, err
	case *ColorGroup:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "ColorGroup", size, offset)
		}
		return b, err
	}
	return nil, nil
}

// decode
func ___decode(data []byte, i interface{}) (bool, error) {
	if msgpack.StructAsArray() {
		return ___decodeAsArray(data, i)
	} else {
		return ___decodeAsMap(data, i)
	}
}

// decodeAsArray
func ___decodeAsArray(data []byte, i interface{}) (bool, error) {
	switch v := i.(type) {
	case *ColorGroup:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **ColorGroup:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	}
	return false, nil
}

// decodeAsMap
func ___decodeAsMap(data []byte, i interface{}) (bool, error) {
	switch v := i.(type) {
	case *ColorGroup:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **ColorGroup:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	}
	return false, nil
}

// calculate size from github.com/smallnest/gosercomp/model.ColorGroup
func ___calcArraySizeColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(v ColorGroup, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(3)
	size += encoder.CalcInt(v.Id)
	size += encoder.CalcString(v.Name)
	if v.Colors != nil {
		s, err := encoder.CalcSliceLength(len(v.Colors), false)
		if err != nil {
			return 0, err
		}
		size += s
		for _, vv := range v.Colors {
			size += encoder.CalcString(vv)
		}
	} else {
		size += encoder.CalcNil()
	}
	return size, nil
}

// calculate size from github.com/smallnest/gosercomp/model.ColorGroup
func ___calcMapSizeColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(v ColorGroup, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(3)
	size += encoder.CalcStringFix(2)
	size += encoder.CalcInt(v.Id)
	size += encoder.CalcStringFix(4)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcStringFix(6)
	if v.Colors != nil {
		s, err := encoder.CalcSliceLength(len(v.Colors), false)
		if err != nil {
			return 0, err
		}
		size += s
		for _, vv := range v.Colors {
			size += encoder.CalcString(vv)
		}
	} else {
		size += encoder.CalcNil()
	}
	return size, nil
}

// encode from github.com/smallnest/gosercomp/model.ColorGroup
func ___encodeArrayColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(v ColorGroup, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(3, offset)
	offset = encoder.WriteInt(v.Id, offset)
	offset = encoder.WriteString(v.Name, offset)
	if v.Colors != nil {
		offset = encoder.WriteSliceLength(len(v.Colors), offset, false)
		for _, vv := range v.Colors {
			offset = encoder.WriteString(vv, offset)
		}
	} else {
		offset = encoder.WriteNil(offset)
	}
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/smallnest/gosercomp/model.ColorGroup
func ___encodeMapColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(v ColorGroup, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(3, offset)
	offset = encoder.WriteStringFix("Id", 2, offset)
	offset = encoder.WriteInt(v.Id, offset)
	offset = encoder.WriteStringFix("Name", 4, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteStringFix("Colors", 6, offset)
	if v.Colors != nil {
		offset = encoder.WriteSliceLength(len(v.Colors), offset, false)
		for _, vv := range v.Colors {
			offset = encoder.WriteString(vv, offset)
		}
	} else {
		offset = encoder.WriteNil(offset)
	}
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/smallnest/gosercomp/model.ColorGroup
func ___decodeArrayColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(v *ColorGroup, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(3, offset)
	if err != nil {
		return 0, err
	}
	{
		var vv int
		vv, offset, err = decoder.AsInt(offset)
		if err != nil {
			return 0, err
		}
		v.Id = vv
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Name = vv
	}
	if !decoder.IsCodeNil(offset) {
		var vv []string
		var vvl int
		vvl, offset, err = decoder.SliceLength(offset)
		if err != nil {
			return 0, err
		}
		vv = make([]string, vvl)
		for vvi := range vv {
			var vvv string
			vvv, offset, err = decoder.AsString(offset)
			if err != nil {
				return 0, err
			}
			vv[vvi] = vvv
		}
		v.Colors = vv
	} else {
		offset++
	}
	return offset, err
}

// decode to github.com/smallnest/gosercomp/model.ColorGroup
func ___decodeMapColorGroup_06ac17048545a6365901e73f2ce4898d1873babf0162d79c2a5f957ded544554(v *ColorGroup, decoder *dec.Decoder, offset int) (int, error) {
	keys := [][]byte{
		{uint8(0x49), uint8(0x64)},                                                     // Id
		{uint8(0x4e), uint8(0x61), uint8(0x6d), uint8(0x65)},                           // Name
		{uint8(0x43), uint8(0x6f), uint8(0x6c), uint8(0x6f), uint8(0x72), uint8(0x73)}, // Colors
	}
	offset, err := decoder.CheckStructHeader(3, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 3 {
		var dataKey []byte
		dataKey, offset, err = decoder.AsStringBytes(offset)
		if err != nil {
			return 0, err
		}
		fieldIndex := -1
		for i, key := range keys {
			if len(dataKey) != len(key) {
				continue
			}
			fieldIndex = i
			for dataKeyIndex := range dataKey {
				if dataKey[dataKeyIndex] != key[dataKeyIndex] {
					fieldIndex = -1
					break
				}
			}
			if fieldIndex >= 0 {
				break
			}
		}
		switch fieldIndex {
		case 0:
			{
				var vv int
				vv, offset, err = decoder.AsInt(offset)
				if err != nil {
					return 0, err
				}
				v.Id = vv
			}
			count++
		case 1:
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Name = vv
			}
			count++
		case 2:
			if !decoder.IsCodeNil(offset) {
				var vv []string
				var vvl int
				vvl, offset, err = decoder.SliceLength(offset)
				if err != nil {
					return 0, err
				}
				vv = make([]string, vvl)
				for vvi := range vv {
					var vvv string
					vvv, offset, err = decoder.AsString(offset)
					if err != nil {
						return 0, err
					}
					vv[vvi] = vvv
				}
				v.Colors = vv
			} else {
				offset++
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", string(dataKey))
		}
	}
	return offset, err
}
