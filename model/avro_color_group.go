// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     data.avsc
 */
package model

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type AvroColorGroup struct {
	Id int32 `json:"id"`

	Name string `json:"name"`

	Colors []string `json:"colors"`
}

const AvroColorGroupAvroCRC64Fingerprint = "\x8b\x99\xe7\x92zb\xd90"

func NewAvroColorGroup() AvroColorGroup {
	r := AvroColorGroup{}
	r.Colors = make([]string, 0)

	return r
}

func DeserializeAvroColorGroup(r io.Reader) (AvroColorGroup, error) {
	t := NewAvroColorGroup()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAvroColorGroupFromSchema(r io.Reader, schema string) (AvroColorGroup, error) {
	t := NewAvroColorGroup()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAvroColorGroup(r AvroColorGroup, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.Colors, w)
	if err != nil {
		return err
	}
	return err
}

func (r AvroColorGroup) Serialize(w io.Writer) error {
	return writeAvroColorGroup(r, w)
}

func (r AvroColorGroup) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"colors\",\"type\":{\"items\":\"string\",\"type\":\"array\"}}],\"name\":\"model.AvroColorGroup\",\"type\":\"record\"}"
}

func (r AvroColorGroup) SchemaName() string {
	return "model.AvroColorGroup"
}

func (_ AvroColorGroup) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ AvroColorGroup) SetInt(v int32)       { panic("Unsupported operation") }
func (_ AvroColorGroup) SetLong(v int64)      { panic("Unsupported operation") }
func (_ AvroColorGroup) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ AvroColorGroup) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ AvroColorGroup) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ AvroColorGroup) SetString(v string)   { panic("Unsupported operation") }
func (_ AvroColorGroup) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *AvroColorGroup) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Name}

		return w

	case 2:
		r.Colors = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.Colors}

		return w

	}
	panic("Unknown field index")
}

func (r *AvroColorGroup) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *AvroColorGroup) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ AvroColorGroup) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ AvroColorGroup) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ AvroColorGroup) HintSize(int)                     { panic("Unsupported operation") }
func (_ AvroColorGroup) Finalize()                        {}

func (_ AvroColorGroup) AvroCRC64Fingerprint() []byte {
	return []byte(AvroColorGroupAvroCRC64Fingerprint)
}

func (r AvroColorGroup) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["colors"], err = json.Marshal(r.Colors)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *AvroColorGroup) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["colors"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Colors); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for colors")
	}
	return nil
}
